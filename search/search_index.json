{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"code_docs_gen/","title":"Test","text":""},{"location":"code_docs_gen/#armonik_cli.cli","title":"<code>armonik_cli.cli</code>","text":""},{"location":"code_docs_gen/#armonik_cli.cli.cli","title":"<code>cli()</code>","text":"<p>ArmoniK CLI is a tool to monitor and manage ArmoniK clusters.</p> Source code in <code>venv/lib/python3.10/site-packages/armonik_cli/cli.py</code> <pre><code>@click.group(name=\"armonik\", context_settings={\"help_option_names\": [\"-h\", \"--help\"]})\n@click.version_option(version=__version__, prog_name=\"armonik\")\ndef cli() -&gt; None:\n    \"\"\"\n    ArmoniK CLI is a tool to monitor and manage ArmoniK clusters.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"code_docs_gen/#armonik_cli.core.filters.SemanticError","title":"<code>armonik_cli.core.filters.SemanticError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for semantic errors in filter expressions.</p> <p>Attributes:</p> Name Type Description <code>msg</code> <p>The error message describing the semantic issue.</p> <code>expr</code> <p>The filter expression where the error occurred.</p> <code>pos</code> <p>The position of the error in the expression (zero-based index).</p> <code>context</code> <p>A snippet of the expression showing the error in context.</p> Source code in <code>venv/lib/python3.10/site-packages/armonik_cli/core/filters.py</code> <pre><code>class SemanticError(Exception):\n    \"\"\"\n    Exception raised for semantic errors in filter expressions.\n\n    Attributes:\n        msg: The error message describing the semantic issue.\n        expr: The filter expression where the error occurred.\n        pos: The position of the error in the expression (zero-based index).\n        context: A snippet of the expression showing the error in context.\n    \"\"\"\n\n    def __init__(self, msg: str, expr: str, column: Optional[int] = None) -&gt; None:\n        super().__init__()\n        self.msg = msg\n        self.expr = expr\n        self.pos = column - 1 if column is not None else -1\n        self.context = self.get_context(80)\n\n    def get_context(self, span: int) -&gt; str:\n        \"\"\"\n        Generate a context string highlighting the error position in the expression.\n\n        Args:\n            span: The number of characters to show before and after the error.\n\n        Returns:\n            A formatted string showing the error context.\n        \"\"\"\n        start = max(self.pos - span, 0)\n        end = self.pos + span\n        before = self.expr[start : self.pos].rsplit(\"\\n\", 1)[-1]\n        after = self.expr[self.pos : end].split(\"\\n\", 1)[0]\n        return f\"\\n\\t{before}{after}\\n\\t\" + len(before.expandtabs()) * \" \" + \"^\\n\\n\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        Generate a string representation of the semantic error.\n\n        Returns:\n            A detailed error message.\n        \"\"\"\n        message = \"Invalid filter expression.\\n\"\n        message += self.context\n        message += self.msg\n        return message\n</code></pre>"},{"location":"code_docs_gen/#armonik_cli.core.filters.SemanticError.__str__","title":"<code>__str__()</code>","text":"<p>Generate a string representation of the semantic error.</p> <p>Returns:</p> Type Description <code>str</code> <p>A detailed error message.</p> Source code in <code>venv/lib/python3.10/site-packages/armonik_cli/core/filters.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Generate a string representation of the semantic error.\n\n    Returns:\n        A detailed error message.\n    \"\"\"\n    message = \"Invalid filter expression.\\n\"\n    message += self.context\n    message += self.msg\n    return message\n</code></pre>"},{"location":"code_docs_gen/#armonik_cli.core.filters.SemanticError.get_context","title":"<code>get_context(span)</code>","text":"<p>Generate a context string highlighting the error position in the expression.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>int</code> <p>The number of characters to show before and after the error.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A formatted string showing the error context.</p> Source code in <code>venv/lib/python3.10/site-packages/armonik_cli/core/filters.py</code> <pre><code>def get_context(self, span: int) -&gt; str:\n    \"\"\"\n    Generate a context string highlighting the error position in the expression.\n\n    Args:\n        span: The number of characters to show before and after the error.\n\n    Returns:\n        A formatted string showing the error context.\n    \"\"\"\n    start = max(self.pos - span, 0)\n    end = self.pos + span\n    before = self.expr[start : self.pos].rsplit(\"\\n\", 1)[-1]\n    after = self.expr[self.pos : end].split(\"\\n\", 1)[0]\n    return f\"\\n\\t{before}{after}\\n\\t\" + len(before.expandtabs()) * \" \" + \"^\\n\\n\"\n</code></pre>"}]}